# This is a basic workflow to help you get started with Actions

name: Render documents and upload

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  render_document:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      RENV_PATHS_ROOT: ~/.local/share/renv
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - uses: r-lib/actions/setup-r@v1
      - name: Install libcurl
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev

      # - name: Set RENV_PATHS_ROOT
      #   shell: bash
      #   run: |
      #     echo "RENV_PATHS_ROOT=${{ runner.temp }}/renv" >> $GITHUB_ENV

      - name: Setup pandoc 
        uses: r-lib/actions/setup-pandoc@v1
      # - name: Install and activate renv
      #   run: |
      #     install.packages("renv")
      #     renv::activate()
      #   shell: Rscript {0}
      # - name: Get R and OS version
      #   id: get-version
      #   run: |
      #     cat("##[set-output name=os-version;]", sessionInfo()$running, "\n", sep = "")
      #     cat("##[set-output name=r-version;]", R.Version()$version.string, sep = "")
      #   shell: Rscript {0}
      # - name: Restore Renv package cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ env.RENV_PATHS_ROOT }}
      #     key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{ inputs.cache-version }}-${{ hashFiles('renv.lock') }}
      #     restore-keys: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-

      - name: Install system dependencies
        # This is not taken care of (yet) by r-lib/actions/setup-renv
        # Package distro used to get the distro for the used ubuntu-latest
        run: |
          Rscript -e "install.packages(c('remotes', 'distro'))"
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(with(distro::distro(), remotes::system_requirements(id, short_version)))')

      - name: Activate renv and restore packages with cache
        uses: r-lib/actions/setup-renv@v2

      - name: Install R CMD check
        run: install.packages("rcmdcheck")
        shell: Rscript {0}

      # - name: Check package
      #   uses: r-lib/actions/check-r-package@v2

      - name: Render document to html
        shell: Rscript {0}
        run: |
          library("rmarkdown")
          rmarkdown::render("index.Rmd", output_format = "html_document")

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
